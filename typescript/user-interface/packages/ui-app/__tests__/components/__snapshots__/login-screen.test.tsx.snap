// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Login screen Authenticated and accessing login page should return redirect 1`] = `
<Navigate
  to={
    Object {
      "pathname": "/",
    }
  }
/>
`;

exports[`Login screen Connected, authentication check complete, and not authenticated should return login page 1`] = `
<LoginScreenComponent
  authenticated={false}
  authenticationCheckComplete={true}
  authenticator={
    Object {
      "authenticateWith": [Function],
      "checkIsAuthenticated": [Function],
      "logout": [Function],
      "unAuthenticateWith": [Function],
    }
  }
  failedToConnect={false}
  redirectPath=""
  setAppAuthenticationStatus={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "authenticated": false,
            "authenticationCheckComplete": true,
            "failedToConnect": [MockFunction],
            "userName": "someUser",
          },
        ],
        Array [
          Object {
            "authenticated": false,
            "authenticationCheckComplete": true,
            "failedToConnect": false,
            "userName": "",
          },
        ],
        Array [
          Object {
            "authenticated": false,
            "authenticationCheckComplete": true,
            "failedToConnect": false,
            "userName": "",
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
>
  <div
    className="bp4-dark login-screen-body"
  >
    <div
      className="login-container"
    >
      <form>
        <img
          alt=""
          id="GMSLogo"
          src="test-file-stub"
          width={370}
        />
        <div
          className="login-legal"
        />
        <div
          className="login-row user"
        >
          <div
            className="login-label"
          >
            Username:
          </div>
          <div
            className="login-input"
          >
            <Blueprint4.InputGroup
              autoFocus={true}
              className="login-input"
              data-cy="username-input"
              onChange={[Function]}
              onKeyDown={[Function]}
              type="text"
              value=""
            >
              <div
                className="bp4-input-group login-input"
              >
                <input
                  autoFocus={true}
                  className="bp4-input"
                  data-cy="username-input"
                  onChange={[Function]}
                  onKeyDown={[Function]}
                  style={
                    Object {
                      "paddingLeft": undefined,
                      "paddingRight": undefined,
                    }
                  }
                  type="text"
                  value=""
                />
              </div>
            </Blueprint4.InputGroup>
          </div>
        </div>
        <div
          className="login-row password"
        >
          <div
            className="login-label"
          >
            Password:
          </div>
          <div
            className="login-input"
          >
            <Blueprint4.InputGroup
              autoComplete="off"
              className="login-input"
              disabled={true}
              onKeyDown={[Function]}
              type="password"
            >
              <div
                className="bp4-input-group bp4-disabled login-input"
              >
                <input
                  autoComplete="off"
                  className="bp4-input"
                  disabled={true}
                  onKeyDown={[Function]}
                  style={
                    Object {
                      "paddingLeft": undefined,
                      "paddingRight": undefined,
                    }
                  }
                  type="password"
                />
              </div>
            </Blueprint4.InputGroup>
          </div>
        </div>
        <div
          className="login-row login-button"
        >
          <Blueprint4.Button
            data-cy="login-btn"
            disabled={false}
            onClick={[Function]}
            text="Login"
          >
            <button
              className="bp4-button"
              data-cy="login-btn"
              onBlur={[Function]}
              onClick={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              type="button"
            >
              <Blueprint4.Icon
                aria-hidden={true}
                key="leftIcon"
                tabIndex={-1}
              />
              <span
                className="bp4-button-text"
                key="text"
              >
                Login
              </span>
              <Blueprint4.Icon
                key="rightIcon"
              />
            </button>
          </Blueprint4.Button>
        </div>
      </form>
    </div>
  </div>
  <ToastContainer
    autoClose={4000}
    closeButton={[Function]}
    closeOnClick={true}
    draggable={true}
    draggableDirection="x"
    draggablePercent={80}
    hideProgressBar={false}
    newestOnTop={false}
    pauseOnFocusLoss={true}
    pauseOnHover={true}
    position="bottom-right"
    role="alert"
    rtl={false}
    theme="dark"
    transition={[Function]}
  >
    <div
      className="Toastify"
    />
  </ToastContainer>
</LoginScreenComponent>
`;

exports[`Login screen failed authentication check complete should return non ideal state 1`] = `
<LoginScreenComponent
  authenticated={false}
  authenticationCheckComplete={false}
  authenticator={
    Object {
      "authenticateWith": [Function],
      "checkIsAuthenticated": [Function],
      "logout": [Function],
      "unAuthenticateWith": [Function],
    }
  }
  failedToConnect={false}
  redirectPath=""
  setAppAuthenticationStatus={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "authenticated": false,
            "authenticationCheckComplete": true,
            "failedToConnect": [MockFunction],
            "userName": "someUser",
          },
        ],
        Array [
          Object {
            "authenticated": false,
            "authenticationCheckComplete": true,
            "failedToConnect": false,
            "userName": "",
          },
        ],
        Array [
          Object {
            "authenticated": false,
            "authenticationCheckComplete": true,
            "failedToConnect": false,
            "userName": "",
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
>
  <Blueprint4.NonIdealState
    action={
      <Blueprint4.Spinner
        intent="primary"
      />
    }
    description="Attempting to login..."
    title="Checking login"
  >
    <div
      className="bp4-non-ideal-state"
    >
      <Component>
        <h4
          className="bp4-heading"
        >
          Checking login
        </h4>
      </Component>
      <div>
        Attempting to login...
      </div>
      <Blueprint4.Spinner
        intent="primary"
      >
        <div
          className="bp4-spinner bp4-intent-primary"
          role="progressbar"
        >
          <div
            className="bp4-spinner-animation"
          >
            <svg
              height={50}
              strokeWidth="8.00"
              viewBox="1.00 1.00 98.00 98.00"
              width={50}
            >
              <path
                className="bp4-spinner-track"
                d="M 50,50 m 0,-45 a 45,45 0 1 1 0,90 a 45,45 0 1 1 0,-90"
              />
              <path
                className="bp4-spinner-head"
                d="M 50,50 m 0,-45 a 45,45 0 1 1 0,90 a 45,45 0 1 1 0,-90"
                pathLength={280}
                strokeDasharray="280 280"
                strokeDashoffset={210}
              />
            </svg>
          </div>
        </div>
      </Blueprint4.Spinner>
    </div>
  </Blueprint4.NonIdealState>
</LoginScreenComponent>
`;

exports[`Login screen failed to connect should return non ideal state 1`] = `
<LoginScreenComponent
  authenticated={false}
  authenticationCheckComplete={false}
  authenticator={
    Object {
      "authenticateWith": [Function],
      "checkIsAuthenticated": [Function],
      "logout": [Function],
      "unAuthenticateWith": [Function],
    }
  }
  failedToConnect={true}
  redirectPath=""
  setAppAuthenticationStatus={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "authenticated": false,
            "authenticationCheckComplete": true,
            "failedToConnect": [MockFunction],
            "userName": "someUser",
          },
        ],
        Array [
          Object {
            "authenticated": false,
            "authenticationCheckComplete": true,
            "failedToConnect": false,
            "userName": "",
          },
        ],
        Array [
          Object {
            "authenticated": false,
            "authenticationCheckComplete": true,
            "failedToConnect": false,
            "userName": "",
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
>
  <Blueprint4.NonIdealState
    action={
      <Blueprint4.Spinner
        intent="danger"
      />
    }
    description="Attempting to connect..."
    icon="error"
    title="No connection to server"
  >
    <div
      className="bp4-non-ideal-state"
    >
      <div
        className="bp4-non-ideal-state-visual"
      >
        <Blueprint4.Icon
          aria-hidden={true}
          icon="error"
          size={60}
          tabIndex={-1}
        >
          <span
            aria-hidden={true}
            className="bp4-icon bp4-icon-error"
            icon="error"
            tabIndex={-1}
          >
            <svg
              data-icon="error"
              height={60}
              viewBox="0 0 20 20"
              width={60}
            >
              <path
                d="M10 0C4.48 0 0 4.48 0 10s4.48 10 10 10 10-4.48 10-10S15.52 0 10 0zm1 16H9v-2h2v2zm0-3H9V4h2v9z"
                fillRule="evenodd"
                key="0"
              />
            </svg>
          </span>
        </Blueprint4.Icon>
      </div>
      <Component>
        <h4
          className="bp4-heading"
        >
          No connection to server
        </h4>
      </Component>
      <div>
        Attempting to connect...
      </div>
      <Blueprint4.Spinner
        intent="danger"
      >
        <div
          className="bp4-spinner bp4-intent-danger"
          role="progressbar"
        >
          <div
            className="bp4-spinner-animation"
          >
            <svg
              height={50}
              strokeWidth="8.00"
              viewBox="1.00 1.00 98.00 98.00"
              width={50}
            >
              <path
                className="bp4-spinner-track"
                d="M 50,50 m 0,-45 a 45,45 0 1 1 0,90 a 45,45 0 1 1 0,-90"
              />
              <path
                className="bp4-spinner-head"
                d="M 50,50 m 0,-45 a 45,45 0 1 1 0,90 a 45,45 0 1 1 0,-90"
                pathLength={280}
                strokeDasharray="280 280"
                strokeDashoffset={210}
              />
            </svg>
          </div>
        </div>
      </Blueprint4.Spinner>
    </div>
  </Blueprint4.NonIdealState>
</LoginScreenComponent>
`;
